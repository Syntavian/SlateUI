@use "sass:map";
@use "sass:color";
@use 'variables';
@use 'prototypes';

@for $i from 1 through 10 { 
    .width-#{$i}, .w-#{$i} {
        width: #{10% * $i} !important;
    }

    .height-#{$i}, .h-#{$i} {
        height: #{10% * $i} !important;
    }

    .size-#{$i}, .s-#{$i} {
        min-width: #{10% * $i} !important;
        width: #{10% * $i} !important;
        min-height: #{10% * $i} !important;
        height: #{10% * $i} !important;
    }

    .width-#{$i}em, .w-#{$i}em {
        min-width: #{$i}em !important;
        width: #{$i}em !important;
    }

    .height-#{$i}em, .h-#{$i}em {
        min-height: #{$i}em !important;
        height: #{$i}em !important;
    }

    .size-#{$i}em, .s-#{$i}em {
        min-width: #{$i}em !important;
        width: #{$i}em !important;
        min-height: #{$i}em !important;
        height: #{$i}em !important;
    }
}

@mixin offsets($scalar: 1) {
    @each $type-key, $type in variables.$offset-types {

        $start: 0;

        @if $type-key == "m" {
            $start: -10;
        }
        
        //Generate offsets of fixed em value amounts.
        @for $i from $start through 10 {
            @each $direction-key, $direction in variables.$offset-directions {
                .#{$type}-#{$direction}-#{$i}, .#{$type-key}-#{$direction-key}-#{$i} {
                    #{$type}-#{$direction}: #{$i * $scalar}em;
                }
            }

            .#{$type}-horizontal-#{$i}, .#{$type-key}-h-#{$i} {
                #{$type}: {
                    left: #{$i * $scalar}em;
                    right: #{$i * $scalar}em;
                }
            }

            .#{$type}-vertical-#{$i}, .#{$type-key}-v-#{$i} {
                #{$type}: {
                    top: #{$i * $scalar}em;
                    bottom: #{$i * $scalar}em;
                }
            }

            .#{$type}-#{$i}, .#{$type-key}-#{$i} {
                #{$type}: #{$i * $scalar}em;
            }

            .child- {
                @each $direction-key, $direction in variables.$offset-directions {
                    &#{$type}-#{$direction}-#{$i} > * {
                        #{$type}-#{$direction}: #{$i * $scalar}em;
                    }
                }
    
                &#{$type}-horizontal-#{$i} > * {
                    #{$type}: {
                        left: #{$i * $scalar}em;
                        right: #{$i * $scalar}em;
                    }
                }
    
                &#{$type}-vertical-#{$i} > * {
                    #{$type}: {
                        top: #{$i * $scalar}em;
                        bottom: #{$i * $scalar}em;
                    }
                }
    
                &#{$type}-#{$i} > * {
                    #{$type}: #{$i * $scalar}em;
                }
            }

            .c- {
                @each $direction-key, $direction in variables.$offset-directions {
                    &#{$type-key}-#{$direction-key}-#{$i} > * {
                        #{$type}-#{$direction}: #{$i * $scalar}em;
                    }
                }
    
                &#{$type-key}-h-#{$i} > * {
                    #{$type}: {
                        left: #{$i * $scalar}em;
                        right: #{$i * $scalar}em;
                    }
                }
    
                &#{$type-key}-v-#{$i} > * {
                    #{$type}: {
                        top: #{$i * $scalar}em;
                        bottom: #{$i * $scalar}em;
                    }
                }
    
                &#{$type-key}-#{$i} > * {
                    #{$type}: #{$i * $scalar}em;
                }
            }
        }

        @each $level, $value in variables.$offset-values {
            @each $direction-key, $direction in variables.$offset-directions {
                .#{$type}-#{$direction}-#{$level}, .#{$type-key}-#{$direction-key}-#{$level} {
                    #{$type}-#{$direction}: $value * $scalar;
                }
            }

            .#{$type}-horizontal-#{$level}, .#{$type-key}-h-#{$level} {
                #{$type}: {
                    left: $value * $scalar;
                    right: $value * $scalar;
                }
            }

            .#{$type}-vertical-#{$level}, .#{$type-key}-v-#{$level} {
                #{$type}: {
                    top: $value * $scalar;
                    bottom: $value * $scalar;
                }
            }

            .#{$type}-#{$level}, .#{$type-key}-#{$level} {
                #{$type}: $value * $scalar;
            }

            .child- {
                @each $direction-key, $direction in variables.$offset-directions {
                    &#{$type}-#{$direction}-#{$level} > * {
                        #{$type}-#{$direction}: $value * $scalar;
                    }
                }
    
                &#{$type}-horizontal-#{$level} > * {
                    #{$type}: {
                        left: $value * $scalar;
                        right: $value * $scalar;
                    }
                }
    
                &#{$type}-vertical-#{$level} > * {
                    #{$type}: {
                        top: $value * $scalar;
                        bottom: $value * $scalar;
                    }
                }
    
                &#{$type}-#{$level} > * {
                    #{$type}: $value * $scalar;
                }
            }

            .c- {
                @each $direction-key, $direction in variables.$offset-directions {
                    &#{$type-key}-#{$direction-key}-#{$level} > * {
                        #{$type}-#{$direction}: $value * $scalar;
                    }
                }
    
                &#{$type-key}-h-#{$level} > * {
                    #{$type}: {
                        left: $value * $scalar;
                        right: $value * $scalar;
                    }
                }
    
                &#{$type-key}-v-#{$level} > * {
                    #{$type}: {
                        top: $value * $scalar;
                        bottom: $value * $scalar;
                    }
                }
    
                &#{$type-key}-#{$level} > * {
                    #{$type}: $value * $scalar;
                }
            }
        }
    }
}

@include offsets(1);

@media screen and (max-width: variables.$screen-width-l) {
    @include offsets(0.75);
}

@media screen and (max-width: variables.$screen-width-m) {
    @include offsets(0.6);
}

@media screen and (max-width: variables.$screen-width-s) {
    @include offsets(0.45);
}
