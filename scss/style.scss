@use "sass:map";
@use "sass:color";
@use 'variables';
@use 'offsets';
@use 'fixed';
@use 'shadow';
@use 'layout';
@use 'prototypes';
@use 'z-index';
@use 'text';
@use 'elements/box';
@use 'elements/images';
@use 'elements/buttons';
@use 'elements/links';
@use 'elements/backgrounds';
@use 'elements/banners';
@use 'elements/forms';

* {
    box-sizing: border-box;
}

html {
    width: 100%;
    height: 100%;
    font-family: variables.$fonts;
    font-size: variables.$font-size;
}

body {
    width: 100%;
    height: 100%;
    min-height: 100%;
    margin: 0px;
}

.container {
    width: fit-content;
    height: fit-content;
}

.no-scrollbar {
    -ms-overflow-style: none;
    scrollbar-width: none;
    &::-webkit-scrollbar {
        display: none;
    }
}

.scroll-bar {
    position: fixed;
    top: 0.1em;
    right: 0.1em;
    width: 0.5em;
    height: calc(100vh - 0.2em);
    z-index: 9999;
}

.scroll-handle {
    @extend %clickable;
    @include prototypes.border-radius();
    position: absolute;
    top: 0px;
    width: 100%;
    height: 10em;
    background-color: rgba(127, 127, 127, 0.7);
    z-index: 9999;
}

.background {
    @extend %z--1;
    position: fixed;
    width: 100vw;
    height: 100vh;
}

.full-screen {
    width: 100vw;
    height: 100vh;
}

.screen-fade {
    width: 100vw;
    background: linear-gradient(variables.$alpha, variables.$white);

    &.dark {
        background: linear-gradient(variables.$alpha-dark, variables.$black);
    }
}

.screen-overlay {
    position: absolute;
    width: 100vw;
    min-height: 100vh;
}

.expand {
    @extend %flex;
    
    > * { 
        animation: animation-shrink 0.2s ease forwards;
    } 

    &:hover {
        > * { 
            animation: animation-expand 0.2s ease forwards;
        } 
    }
}

@keyframes animation-expand {
0%{margin: 0em; padding: 0.5em;}
100%{margin: -0.5em; padding: 1em;}
}

@keyframes animation-shrink {
0%{margin: -0.5em; padding: 1em;}
100%{margin: 0em; padding: 0.5em;}
}

.break {
    @extend %shadow-down-1;
    @extend %margin-bottom-s;
    height: 1px;
    width: 100%;
}

.theme-selector {
    &::before {
        content: "Change Theme";
        display: none;
    }

    &::after {
        content: "#{inspect(variables.$themes)}";
        display: none;
    }

    span {
        z-index: 1;
    }

    select {
        z-index: 2;
        background-color: transparent;
        color: transparent;
        border: none;
        display: block;
        position: absolute;
        font-family: variables.$fonts;
        padding-left: 0.5em;

        &:hover {
            color: inherit;
        }
    }

    &:hover {
        span {
            color: transparent;
        }
    }
}

.no-shadow {
    box-shadow: none;
}

@each $name, $theme in variables.$themes {
    $primary: map.get($theme, "primary");
    $secondary: map.get($theme, "secondary");
    $tertiary: map.get($theme, "tertiary");
    $darkened-20: map.get($theme, "darkened-20");
    $lightened-20: map.get($theme, "lightened-20");
    $shifted-10: map.get($theme, "shifted-10");
    $shifted-20: map.get($theme, "shifted-20");
    $complement: map.get($theme, "complement");
    $inverted: map.get($theme, "inverted");
    $text: map.get($theme, "text-colour");

    .break.#{$name} {
        background-color: rgba($shifted-20, 0.5);
    }

    .theme-selector select.#{$name} option {
        background-color: $primary;
    }

    .no-shadow.#{$name} {
        box-shadow: none;
    }
}


