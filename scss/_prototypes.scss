@use "sass:map";
@use "sass:color";
@use "variables";

@mixin flex($direction, $justify, $align, $grow: 1) {
    display: flex;
    flex-direction: $direction;
    justify-content: $justify;
    align-items: $align;
    flex-grow: $grow;
}

@mixin flex-column($justify, $align, $grow: 1) {
    @include flex(column, $justify, $align, $grow);
}

@mixin flex-row($justify, $align, $grow: 1) {
    @include flex(row, $justify, $align, $grow);
    width: 100%;

    &.shrink-xl:not(.image-carousel) {
        @media screen and (max-width: variables.$screen-width-xl) {
            @include flex(column, $align, $justify, $grow);
    
            &.flex-reverse {
                flex-direction: column-reverse;
            }

            > * {
                width: 100%;
                margin-left: 0px;
                margin-right: 0px;
            }
        }
    }

    &.shrink-l:not(.image-carousel) {
        @media screen and (max-width: variables.$screen-width-l) {
            @include flex(column, $align, $justify, $grow);
    
            &.flex-reverse {
                flex-direction: column-reverse;
            }

            > * {
                width: 100%;
                margin-left: 0px;
                margin-right: 0px;
            }
        }
    }

    &.shrink-m:not(.image-carousel) {
        @media screen and (max-width: variables.$screen-width-m) {
            @include flex(column, $align, $justify, $grow);
    
            &.flex-reverse {
                flex-direction: column-reverse;
            }

            > * {
                width: 100%;
                margin-left: 0px;
                margin-right: 0px;
            }
        }
    }

    &:not(.image-carousel,.no-shrink) {
        @media screen and (max-width: variables.$screen-width-s) {
            @include flex(column, $align, $justify, $grow);
    
            &.flex-reverse {
                flex-direction: column-reverse;
            }

            > * {
                width: 100%;
                margin-left: 0px;
                margin-right: 0px;
            }
        }
    }
}

@mixin border-radius($radius: 0.25em) {
    border: 0px;
    border-radius: $radius;
}

@mixin gradient($primary) {
    background: linear-gradient(135deg, variables.$alpha, darken($primary, 10%) 25%, variables.$alpha);
}

@mixin gradient-hover-animation($primary) {
    @include gradient($primary);
    background-size: 200% 200%;
    -webkit-animation: animation-back 0.2s ease forwards;
    -moz-animation: animation-back 0.2s ease forwards;
    animation: animation-back 0.2s ease forwards;

    &:hover {
        -webkit-animation: animation-forward 0.2s ease forwards;
        -moz-animation: animation-forward 0.2s ease forwards;
        animation: animation-forward 0.2s ease forwards;
    }
}

@mixin link($primary) {
    @include gradient-hover-animation($primary);
    @extend %inline-box;
    @extend %clickable;
    padding: 0.25em;
    text-align: center;
    text-decoration: none;
}

@mixin link-touch($primary) {
    @include gradient-hover-animation($primary);
    @extend %box;
    @extend %clickable;
    padding: 0.25em;
    text-align: center;
    text-decoration: none;
}

@mixin icon($primary) {
    @include gradient-hover-animation($primary);
    @extend %box;
    padding: 0.25em;
    text-align: center;
    text-decoration: none;
}

@each $level, $value in variables.$offset-values {
    @each $type-key, $type in variables.$offset-types {
        @each $direction-key, $direction in variables.$offset-directions {
            %#{$type}-#{$direction}-#{$level} {
                #{$type}-#{$direction}: $value;
            }
        }

        %#{$type}-horizontal-#{$level} {
            #{$type}: {
                left: $value;
                right: $value;
            }
        }

        %#{$type}-vertical-#{$level} {
            #{$type}: {
                top: $value;
                bottom: $value;
            }
        }

        %#{$type}-#{$level} {
            #{$type}: $value;
        }
    }    
}

@for $i from -1 through 10 {
    %z-#{$i} {
        z-index: $i;
    }
}

@for $i from 1 through 10 { 
    %width-#{$i} {
        width: #{10% * $i};
    }

    %height-#{$i} {
        height: #{10% * $i};
    }

    %width-#{$i}em {
        min-width: #{$i}em;
        width: #{$i}em;
    }

    %height-#{$i}em {
        min-height: #{$i}em;
        height: #{$i}em;
    }

    %size-#{$i}em {
        min-width: #{$i}em;
        width: #{$i}em;
        min-height: #{$i}em;
        height: #{$i}em;
    }

    @each $type-key, $type in variables.$offset-types {
        @each $direction-key, $direction in variables.$offset-directions {
            %#{$type}-#{$direction}-#{$i} {
                #{$type}-#{$direction}: #{$i}em;
            }
        }

        %#{$type}-horizontal-#{$i} {
            #{$type}: {
                left: #{$i}em;
                right: #{$i}em;
            }
        }

        %#{$type}-vertical-#{$i} {
            #{$type}: {
                top: #{$i}em;
                bottom: #{$i}em;
            }
        }

        %#{$type}-#{$i} {
            #{$type}: #{$i}em;
        }
    }
}

@for $i from 0 through 10 {
    %flex-grow-#{$i} {
        flex-grow: #{$i};
    }

    %shadow-#{$i} {
        box-shadow: gray 0px 0px ($i + 2px) 0px;
    }
    
    %shadow-up-#{$i} {
        box-shadow: gray 0px -#{$i}px ($i + 2px) 0px;
    }
    
    %shadow-down-#{$i} {
        box-shadow: gray 0px #{$i}px ($i + 2px) 0px;
    }
    
    %shadow-right-#{$i} {
        box-shadow: gray #{$i}px 0px ($i + 2px) 0px;
    }
    
    %shadow-left-#{$i} {
        box-shadow: gray -#{$i}px 0px ($i + 2px) 0px;
    }

    %shadow-inset-#{$i} {
        box-shadow: gray 0px 0px ($i + 2px) 0px inset;
    }
    
    %shadow-inset-up-#{$i} {
        box-shadow: gray 0px -#{$i}px ($i + 2px) 0px inset;
    }
    
    %shadow-inset-down-#{$i} {
        box-shadow: gray 0px #{$i}px ($i + 2px) 0px inset;
    }
    
    %shadow-inset-right-#{$i} {
        box-shadow: gray #{$i}px 0px ($i + 2px) 0px inset;
    }
    
    %shadow-inset-left-#{$i} {
        box-shadow: gray -#{$i}px 0px ($i + 2px) 0px inset;
    }

    @each $name, $theme in variables.$themes {
        $colour: map.get(map.get($theme, "colours"), "shifted-2");
    
        %shadow-#{$i}.#{$name} {
            box-shadow: $colour 0px 0px ($i + 2px) 0px;
        }
        
        %shadow-up-#{$i}.#{$name} {
            box-shadow: $colour 0px -#{$i}px ($i + 2px) 0px;
        }
        
        %shadow-down-#{$i}.#{$name} {
            box-shadow: $colour 0px #{$i}px ($i + 2px) 0px;
        }
        
        %shadow-right-#{$i}.#{$name} {
            box-shadow: $colour #{$i}px 0px ($i + 2px) 0px;
        }
        
        %shadow-left-#{$i}.#{$name} {
            box-shadow: $colour -#{$i}px 0px ($i + 2px) 0px;
        }
    
        %shadow-inset-#{$i}.#{$name} {
            box-shadow: $colour 0px 0px ($i + 2px) 0px inset;
        }
        
        %shadow-inset-up-#{$i}.#{$name} {
            box-shadow: $colour 0px -#{$i}px ($i + 2px) 0px inset;
        }
        
        %shadow-inset-down-#{$i}.#{$name} {
            box-shadow: $colour 0px #{$i}px ($i + 2px) 0px inset;
        }
        
        %shadow-inset-right-#{$i}.#{$name} {
            box-shadow: $colour #{$i}px 0px ($i + 2px) 0px inset;
        }
        
        %shadow-inset-left-#{$i}.#{$name} {
            box-shadow: $colour -#{$i}px 0px ($i + 2px) 0px inset;
        }
    }
}

%clickable {
    cursor: pointer;
    user-select: none;
}

%flex {
    @include flex(column, center, center, 0);
}

%flex-column {
    @include flex-column(space-between, center);
}

%flex-row {
    @include flex-row(space-between, center);
}

%box {
    @extend %shadow-1;
    @extend %flex;
    min-width: 5em;
    min-height: 5em;
    border-radius: 0.25em;
}

%inline-box {
    @extend %box;
    display: inline-flex;
    min-height: fit-content;
}
