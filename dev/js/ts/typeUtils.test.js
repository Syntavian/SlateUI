import{elementToHTMLElement as a,querySelectorAllResultToArray as b}from"./typeUtils";describe("querySelectorAllResultToArray()",()=>{test("should return the queried elements if they are HTMLElements",()=>{let a=document.createElement("div");a.className="test",document.body.appendChild(a);let c=document.querySelectorAll(".test");expect(b(c)).toStrictEqual([a,])}),test("should throw an error if an element is not an HTMLElement",()=>{let a=document.createElementNS("http://www.w3.org/2000/svg","svg");a.id="test",document.body.appendChild(a);let c=document.querySelectorAll("#test");expect(()=>b(c)).toThrowError(new Error("elementToHTMLElement: element is not an HTMLElement"))})}),describe("elementToHTMLElement()",()=>{test("should return the element if it is an HTMLElement",()=>{let b=document.createElement("div");expect(a(b)).toStrictEqual(b)}),test("should not throw an error return the element from a query if it is an HTMLElement",()=>{let b=document.createElement("div");b.className="test",document.body.appendChild(b);let c=Array.from(document.querySelectorAll(".test"));expect(()=>a(c[0])).not.toThrow(),expect(a(c[0])).toStrictEqual(b)}),test("should throw an error if the element is not an HTMLElement",()=>{let b=void 0;expect(()=>a(b)).toThrow(new Error("elementToHTMLElement: element is not an HTMLElement"))})})